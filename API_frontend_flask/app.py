from flask import Flask, redirect, url_for
from flask_cors import CORS
import logging
import os
from termcolor import colored

from API_frontend_flask.config.settings import settings
from API_frontend_flask.config.jinja import setup_jinja
from API_frontend_flask.api.routes import main as main_blueprint

# Configura√ß√£o de logging personalizada
class ColoredFormatter(logging.Formatter):
    """Formatador personalizado para logs coloridos."""
    
    def format(self, record):
        # Cores para diferentes n√≠veis de log
        colors = {
            'INFO': 'green',
            'WARNING': 'yellow',
            'ERROR': 'red',
            'DEBUG': 'blue'
        }
        
        # √çcones para diferentes tipos de mensagem
        icons = {
            'Iniciando': 'üöÄ',
            'iniciada': '‚úÖ',
            'Documenta√ß√£o': 'üìö',
            'Debugger': 'üîß',
            'Running': '‚ö°Ô∏è',
            'WARNING': '‚ö†Ô∏è ',
            'ERROR': '‚ùå'
        }
        
        # Adiciona cor e √≠cone √† mensagem
        for key, icon in icons.items():
            if key in record.msg:
                record.msg = f"{icon} {record.msg}"
        
        # Formata a mensagem
        if record.levelname in colors:
            record.msg = colored(record.msg, colors[record.levelname])
            record.levelname = colored(record.levelname, colors[record.levelname])
        
        return super().format(record)

# Configura√ß√£o do logger
logger = logging.getLogger('frontend')
logger.setLevel(logging.INFO)
handler = logging.StreamHandler()
handler.setFormatter(ColoredFormatter('%(message)s'))
logger.addHandler(handler)

def create_app():
    """Cria e configura a aplica√ß√£o Flask."""
    
    logger.info("Iniciando Frontend Flask...")
    
    # Inicializa o Flask com as configura√ß√µes
    app = Flask(__name__,
        template_folder=settings.TEMPLATE_FOLDER,
        static_folder=settings.STATIC_FOLDER,
        static_url_path=settings.STATIC_URL_PATH
    )
    
    # Configura√ß√£o do CORS
    CORS(app, resources={
        r"/*": {
            "origins": "*",
            "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
            "allow_headers": ["Content-Type", "Authorization"]
        }
    })
    
    # Carrega configura√ß√µes
    app.config.update(settings.get_config())
    
    # Configura Jinja2
    setup_jinja(app)
    
    # Registra os blueprints
    app.register_blueprint(main_blueprint)
    
    # Handler para erro 404 - P√°gina n√£o encontrada
    @app.errorhandler(404)
    def page_not_found(error):
        logger.warning(f"Tentativa de acesso a rota inexistente. Redirecionando para home...")
        return redirect(url_for('main.home'))
    
    # Log de inicializa√ß√£o
    logger.info(f"Frontend Flask iniciado - Vers√£o {settings.VERSION}")
    
    # Log dos endpoints do Frontend
    logger.info("\nüìç Frontend Endpoints (Interface):")
    logger.info(f"üè† Home: http://{settings.HOST}:{settings.PORT}/")
    logger.info(f"üì± Inst√¢ncias: http://{settings.HOST}:{settings.PORT}/instances")
    logger.info(f"üí¨ Mensagens: http://{settings.HOST}:{settings.PORT}/messages")
    logger.info(f"üè• Health Check: http://{settings.HOST}:{settings.PORT}/health")
    
    # Aviso sobre o backend
    logger.warning("\n‚ö†Ô∏è  Backend (API Principal):")
    logger.warning(f"üîå API URL: {settings.RAG_API_URL}")
    logger.warning(f"üìö Documenta√ß√£o API: {settings.RAG_API_URL}/docs")
    logger.warning("üìå Certifique-se que o backend est√° rodando antes de usar a interface")
    
    return app

# Cria a aplica√ß√£o
app = create_app()

if __name__ == '__main__':
    app.run(
        host=settings.HOST,
        port=settings.PORT,
        debug=settings.DEBUG
    ) 