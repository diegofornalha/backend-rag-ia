"""
Teste do embate entrando em a√ß√£o.
"""

import pytest
from datetime import datetime
from backend_rag_ia.monitoring.metrics import Metrica

def test_embate_em_acao():
    """Testa o embate entrando em a√ß√£o com limite de ferramentas."""
    print("\n=== Teste de Embate em A√ß√£o ===")
    print("Simulando embate cont√≠nuo sobre um tema...")
    
    metrica = Metrica(
        nome="debate_ia_etica",
        valor=1.0,
        timestamp=datetime.now()
    )
    
    # Primeira rodada - Iniciando embate
    print("\n[Primeira Rodada - In√≠cio do Embate]")
    for i in range(4):
        print(f"\n>> Itera√ß√£o {i+1}:")
        resultado = metrica.incrementar_tools()
        if resultado:
            print("‚úÖ Ferramenta liberada e em uso")
        else:
            print("‚ùå Acesso bloqueado pelo sistema")
    
    # Segunda rodada - Embate continua ap√≥s conten√ß√£o
    print("\n[Segunda Rodada - Embate Continua]")
    for i in range(4):
        print(f"\n>> Nova itera√ß√£o {i+1}:")
        resultado = metrica.incrementar_tools()
        if resultado:
            print("‚úÖ Ferramenta liberada e em uso")
        else:
            print("‚ùå Acesso bloqueado pelo sistema")
    
    # Terceira rodada - Interrup√ß√£o manual
    print("\n[Terceira Rodada - Interrup√ß√£o Manual]")
    metrica.interromper_embate()
            
    print(f"\nTotal de itera√ß√µes realizadas: {metrica.tools_count}")
    print(f"Status final do embate: {'üü¢ Ativo' if metrica.embate_ativo else 'üî¥ Interrompido'}")

def test_hidratacao_inputs_embate():
    """Testa a hidrata√ß√£o dos inputs durante o processo de embate."""
    print("\n=== Teste de Hidrata√ß√£o de Inputs no Embate ===")
    
    # Preparando dados de teste
    dados_entrada = {
        "tema": "ia_generativa",
        "contexto": "debate_etico",
        "parametros": {
            "max_tokens": 100,
            "temperatura": 0.7
        }
    }
    
    metrica = Metrica(
        nome="hidratacao_inputs",
        valor=0.0,
        timestamp=datetime.now()
    )
    
    # Teste de hidrata√ß√£o b√°sica
    print("\n[Verificando Hidrata√ß√£o B√°sica]")
    assert dados_entrada["tema"] is not None, "Tema n√£o pode ser nulo"
    assert isinstance(dados_entrada["parametros"], dict), "Par√¢metros devem ser um dicion√°rio"
    
    # Teste de valida√ß√£o de par√¢metros
    print("\n[Validando Par√¢metros do Embate]")
    assert 0 <= dados_entrada["parametros"]["temperatura"] <= 1, "Temperatura deve estar entre 0 e 1"
    assert dados_entrada["parametros"]["max_tokens"] > 0, "Max tokens deve ser positivo"
    
    # Simulando processo de hidrata√ß√£o
    print("\n[Simulando Hidrata√ß√£o Durante Embate]")
    for _ in range(3):
        metrica.valor += 0.3
        print(f"N√≠vel de hidrata√ß√£o: {metrica.valor:.1f}")
        assert 0 <= metrica.valor <= 1, "N√≠vel de hidrata√ß√£o deve estar entre 0 e 1"
    
    print("\n‚úÖ Todos os testes de hidrata√ß√£o passaram com sucesso")

if __name__ == "__main__":
    pytest.main(["-v", "-s", __file__]) 