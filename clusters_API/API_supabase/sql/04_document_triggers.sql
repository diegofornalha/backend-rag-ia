-- Função para atualizar a contagem de documentos
CREATE OR REPLACE FUNCTION update_documents_count()
RETURNS TRIGGER AS $$
DECLARE
    current_count integer;
BEGIN
    -- Pega a contagem atual de documentos
    SELECT COUNT(*) INTO current_count FROM documents;
    
    -- Atualiza ou insere na tabela statistics
    INSERT INTO statistics (key, value, updated_at)
    VALUES ('documents_count', current_count, NOW())
    ON CONFLICT (key) 
    DO UPDATE SET 
        value = current_count,
        updated_at = NOW();
        
    -- Log da alteração
    INSERT INTO document_changes_log (
        operation,
        document_id,
        previous_count,
        new_count,
        changed_at
    ) VALUES (
        TG_OP,
        CASE 
            WHEN TG_OP = 'DELETE' THEN OLD.id
            ELSE NEW.id
        END,
        current_count - CASE TG_OP 
            WHEN 'INSERT' THEN 1 
            WHEN 'DELETE' THEN -1
            ELSE 0 
        END,
        current_count,
        NOW()
    );
    
    RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Criar tabela de log para monitorar alterações
CREATE TABLE IF NOT EXISTS document_changes_log (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    operation TEXT NOT NULL,
    document_id INTEGER NOT NULL,
    previous_count INTEGER NOT NULL,
    new_count INTEGER NOT NULL,
    changed_at TIMESTAMPTZ DEFAULT NOW()
);

-- Trigger após inserção
DROP TRIGGER IF EXISTS after_document_insert ON documents;
CREATE TRIGGER after_document_insert
    AFTER INSERT ON documents
    FOR EACH ROW
    EXECUTE FUNCTION update_documents_count();

-- Trigger após deleção
DROP TRIGGER IF EXISTS after_document_delete ON documents;
CREATE TRIGGER after_document_delete
    AFTER DELETE ON documents
    FOR EACH ROW
    EXECUTE FUNCTION update_documents_count();

-- Função para visualizar histórico de alterações
CREATE OR REPLACE FUNCTION get_document_changes_history(
    last_n_hours integer DEFAULT 24
)
RETURNS TABLE (
    operation text,
    document_id integer,
    previous_count integer,
    new_count integer,
    changed_at timestamptz,
    time_since_last_change interval
) AS $$
BEGIN
    RETURN QUERY
    SELECT 
        l.operation,
        l.document_id,
        l.previous_count,
        l.new_count,
        l.changed_at,
        l.changed_at - LAG(l.changed_at) OVER (ORDER BY l.changed_at) as time_since_last
    FROM document_changes_log l
    WHERE l.changed_at >= NOW() - (last_n_hours || ' hours')::interval
    ORDER BY l.changed_at DESC;
END;
$$ LANGUAGE plpgsql;

-- Exemplo de uso:
-- SELECT * FROM get_document_changes_history(24);  -- últimas 24 horas
-- SELECT * FROM get_document_changes_history(1);   -- última hora 