# RULES FOR AI

+ ‚Üí Separador entre instru√ß√µes diferentes

                               1. Regras Obrigat√≥rias:
[] ‚Üí A√ß√µes obrigat√≥rias
[Respostas sempre em portugu√™s BR]
+
[Estou no ambiente Mac considerar isso]
+
[Manter boas praticas de aplica√ß√£o √© principalmente server-side para nao se misturar com Client-Side]
+
[quando eu pedir para "rodar front", quero que trabalhe com a pasta API_frontend]
+
[Se preoculpe do codigo se integrar bem com o backend em suas resposabilidades devidas]
+
[Cluester frontend √© a unica pasta de clusters de api que fica na pasta raiz al√©m de clusters_API]
+
[Antes de criar qualquer arquivo novo, realizar uma busca completa no c√≥digo para verificar se j√° n√£o existe arquivo similar ou com mesma fun√ß√£o em outra parte do projeto, evitando assim redund√¢ncia e duplicidade]
+
[Ao remover ou substituir refer√™ncias de uma tecnologia por outra, realizar pelo menos 2 verifica√ß√µes completas para garantir que a remo√ß√£o foi bem sucedida]

## 10. üîç Regras de Verifica√ß√£o Dupla

1. **Remo√ß√£o de Refer√™ncias**
   - [SEMPRE realizar no m√≠nimo 2 verifica√ß√µes completas ao remover refer√™ncias]
   - [SEMPRE documentar cada verifica√ß√£o realizada]
   - [SEMPRE usar diferentes m√©todos de busca (grep, find, etc)]
   - [NUNCA assumir sucesso sem segunda verifica√ß√£o]

2. **Processo de Verifica√ß√£o**
   - Primeira Verifica√ß√£o:
     - Busca inicial por refer√™ncias
     - Remo√ß√£o das refer√™ncias encontradas
     - Documenta√ß√£o das altera√ß√µes
   
   - Segunda Verifica√ß√£o:
     - Nova busca usando m√©todo diferente
     - Verifica√ß√£o de arquivos relacionados
     - Confirma√ß√£o de que nada foi esquecido

3. **Crit√©rios de Conclus√£o**
   - [‚úì] Duas verifica√ß√µes sem encontrar refer√™ncias, OU
   - [‚úì] Certeza absoluta com evid√™ncias documentadas
   - [‚úì] Testes confirmando que nada quebrou
   - [‚úì] Documenta√ß√£o das verifica√ß√µes realizadas

4. **Documenta√ß√£o Necess√°ria**
   - Data e hora de cada verifica√ß√£o
   - M√©todo usado em cada verifica√ß√£o
   - Arquivos verificados/alterados
   - Resultado de cada verifica√ß√£o

‚ùó NUNCA considerar conclu√≠do sem as duas verifica√ß√µes
‚ùó SEMPRE documentar o processo de verifica√ß√£o
‚ùó Em caso de d√∫vida, realizar verifica√ß√£o adicional

                                     2. Observa√ß√µes
() ‚Üí Observa√ß√µes/notas adicionais
(consulte quando necessario o package.json)

                                       3. Proibi√ß√µes
X X ‚Üí Expressamente proibido 
X Proibido vue no meu frontend X
X Proibido conte√∫do misto (server-side/Client-Side) X


‚Üì For√ßar ‚ÜìRegras de Execu√ß√£o (For√ßar):

Se existir comando na allowlist, executar diretamente
  Exemplo: pnpm ‚Üí pnpm install
  Exemplo: npm ‚Üí npm install -g
b) Instala√ß√µes:
Se houver instru√ß√£o de instala√ß√£o, iniciar no composer
  Exemplo: /bin/bash
  Exemplo: brew install node
c) Comportamento:
‚ùå N√£o perguntar permiss√£o para continuar
‚ùå N√£o pedir confirma√ß√£o para instala√ß√£o
‚úÖ Executar comandos em sequ√™ncia
‚úÖ Prosseguir automaticamente quando necess√°rio


## FLUXO DE TRABALHO
1. Verificar regras obrigat√≥rias
2. Manter execu√ß√£o cont√≠nua
3. Seguir conven√ß√µes de sintaxe
4. Verificar duplicidade antes de criar arquivos


## 4. ‚ö†Ô∏è Regra Obrigat√≥ria de Preserva√ß√£o

‚ùó IMPORTANTE: Antes de remover qualquer funcionalidade ou endpoint:

1. **PARE IMEDIATAMENTE** se a funcionalidade tiver utilidade pr√°tica
2. **CONSULTE** o desenvolvedor sobre a remo√ß√£o
3. **EXPLIQUE** claramente a utilidade da funcionalidade
4. **AGUARDE** confirma√ß√£o expl√≠cita antes de prosseguir com a remo√ß√£o

Esta regra existe para evitar a perda acidental de recursos √∫teis. 


## 5. üîí Regras Imprescind√≠veis de Seguran√ßa e Qualidade

1. **Seguran√ßa**
- [Todas as entradas de usu√°rio DEVEM ser sanitizadas]
- [Senhas e chaves de API SEMPRE em vari√°veis de ambiente]
- [Implementar rate limiting em todos endpoints p√∫blicos]
- [CORS configurado adequadamente]

2. **Qualidade de C√≥digo**
- [Logging obrigat√≥rio para opera√ß√µes cr√≠ticas]
- [Tratamento de exce√ß√µes em todas opera√ß√µes de I/O]
- [Timeout configurado em todas chamadas externas]
- [Valida√ß√£o de dados em todas as rotas]

3. **Performance**
- [Pagina√ß√£o obrigat√≥ria em listagens]
- [Cache implementado em consultas pesadas]
- [Compress√£o de resposta ativada]
- [Otimiza√ß√£o de queries do banco]

4. **Monitoramento**
- [Healthcheck em todos servi√ßos]
- [M√©tricas de performance registradas]
- [Alertas configurados para falhas cr√≠ticas]
- [Logs estruturados em JSON]

‚ùó Estas regras n√£o s√£o negoci√°veis e devem ser implementadas em todas as features 


## 6. ü§ñ Regras Espec√≠ficas para o Copiloto de IA

1. **Preven√ß√£o de Erros Comuns**
- [SEMPRE verificar imports necess√°rios antes de gerar c√≥digo]
- [SEMPRE verificar depend√™ncias no requirements.txt antes de usar bibliotecas]
- [NUNCA misturar padr√µes de c√≥digo diferentes no mesmo arquivo]
- [SEMPRE manter consist√™ncia com o estilo de c√≥digo existente]

2. **Verifica√ß√µes Autom√°ticas**
- [Validar sintaxe antes de finalizar qualquer gera√ß√£o de c√≥digo]
- [Confirmar compatibilidade de vers√µes das bibliotecas]
- [Verificar nomenclatura consistente com o projeto]
- [Garantir que n√£o h√° c√≥digo morto ou imports n√£o utilizados]

3. **Integra√ß√µes**
- [Verificar endpoints existentes antes de criar novos]
- [Manter padr√£o de respostas API consistente]
- [Garantir que rotas seguem a estrutura de clusters]
- [Validar integra√ß√£o com sistema de logs antes de finalizar]

4. **Documenta√ß√£o Autom√°tica**
- [Gerar docstrings para todas as fun√ß√µes]
- [Manter README atualizado com novas funcionalidades]
- [Documentar todas as vari√°veis de ambiente necess√°rias]
- [Adicionar exemplos de uso em coment√°rios]

5. **Testes e Valida√ß√£o**
- [Gerar testes unit√°rios junto com o c√≥digo]
- [Incluir valida√ß√µes de tipo em todas as fun√ß√µes]
- [Adicionar tratamento de erros espec√≠ficos]
- [Implementar logging para debugging]

‚ùó O copiloto deve PARAR e ALERTAR se encontrar qualquer viola√ß√£o dessas regras
‚ùó SEMPRE priorizar c√≥digo defensivo e previs√≠vel sobre c√≥digo "esperto" ou complexo
‚ùó Em caso de d√∫vida, SEMPRE optar pela solu√ß√£o mais expl√≠cita e documentada 


## 7. üéØ Regras Anti-Alucina√ß√£o

1. **Verifica√ß√£o de Contexto**
- [SEMPRE verificar o c√≥digo existente antes de fazer refer√™ncia a fun√ß√µes ou vari√°veis]
- [NUNCA assumir exist√™ncia de arquivos sem confirmar]
- [SEMPRE validar se bibliotecas mencionadas est√£o no requirements.txt]
- [NUNCA inventar nomes de fun√ß√µes ou classes sem verificar exist√™ncia]

2. **Gera√ß√£o de C√≥digo**
- [SEMPRE gerar c√≥digo completo, sem placeholder ou TODO comments]
- [NUNCA referenciar endpoints ou rotas sem confirmar exist√™ncia]
- [SEMPRE incluir todos os imports necess√°rios]
- [NUNCA assumir configura√ß√µes n√£o documentadas]

3. **Valida√ß√£o de Recursos**
- [SEMPRE verificar se diret√≥rios mencionados existem]
- [NUNCA assumir exist√™ncia de vari√°veis de ambiente]
- [SEMPRE confirmar nomes de tabelas/colunas antes de usar]
- [NUNCA inventar configura√ß√µes de servi√ßos externos]

4. **Checagem de Depend√™ncias**
- [SEMPRE verificar vers√µes exatas das bibliotecas]
- [NUNCA misturar diferentes frameworks sem confirma√ß√£o]
- [SEMPRE validar compatibilidade entre pacotes]
- [NUNCA assumir funcionalidades de vers√µes espec√≠ficas sem verificar]

5. **Auto-Corre√ß√£o**
- [Se detectar inconsist√™ncia, PARAR e REPORTAR imediatamente]
- [SEMPRE fornecer contexto completo do erro detectado]
- [Em caso de d√∫vida, PERGUNTAR ao usu√°rio]
- [NUNCA tentar "adivinhar" configura√ß√µes ou depend√™ncias]

‚ùó SEMPRE preferir dizer "Preciso verificar" do que assumir algo incerto
‚ùó Qualquer suposi√ß√£o deve ser explicitamente comunicada ao usu√°rio
‚ùó Em caso de incerteza sobre qualquer recurso, PARAR e VERIFICAR
‚ùó NUNCA gerar c√≥digo baseado em suposi√ß√µes sobre o ambiente 


## 8. üîÑ Regras de Contexto e Conex√µes

1. **Verifica√ß√£o de Depend√™ncias entre Arquivos**
- [SEMPRE verificar se arquivos referenciados no Dockerfile existem nos caminhos corretos]
- [SEMPRE verificar scripts de inicializa√ß√£o (start.sh, init.sh, etc) antes de builds]
- [SEMPRE validar caminhos relativos entre arquivos de configura√ß√£o]
- [NUNCA assumir exist√™ncia de arquivos sem verifica√ß√£o cruzada]

2. **Valida√ß√£o de Contexto Docker**
- [SEMPRE verificar .dockerignore antes de builds]
- [SEMPRE confirmar que arquivos necess√°rios n√£o est√£o sendo ignorados]
- [SEMPRE validar permiss√µes de arquivos execut√°veis (chmod +x)]
- [SEMPRE verificar estrutura de diret√≥rios no contexto do build]

3. **Conex√µes entre Configura√ß√µes**
- [SEMPRE verificar consist√™ncia entre vari√°veis de ambiente em diferentes arquivos]
- [SEMPRE validar portas e hosts entre docker-compose, Dockerfile e configura√ß√µes]
- [SEMPRE confirmar paths entre diferentes arquivos de configura√ß√£o]
- [NUNCA deixar de verificar depend√™ncias circulares]

4. **Verifica√ß√£o de Scripts**
- [SEMPRE testar scripts de inicializa√ß√£o localmente antes do deploy]
- [SEMPRE verificar permiss√µes e encoding dos scripts]
- [SEMPRE validar vari√°veis de ambiente usadas nos scripts]
- [SEMPRE confirmar paths absolutos e relativos nos scripts]

5. **Integra√ß√£o entre Servi√ßos**
- [SEMPRE verificar configura√ß√µes de rede entre servi√ßos]
- [SEMPRE validar depend√™ncias entre containers]
- [SEMPRE confirmar volumes e mounts]
- [SEMPRE verificar healthchecks e suas depend√™ncias]

‚ùó SEMPRE fazer verifica√ß√£o cruzada entre arquivos relacionados
‚ùó NUNCA assumir que um arquivo existe sem verificar sua localiza√ß√£o e conte√∫do
‚ùó SEMPRE validar o contexto completo antes de builds ou deploys
‚ùó Manter um checklist de verifica√ß√µes para cada tipo de arquivo cr√≠tico 


## 9. üñ•Ô∏è Regras de Integra√ß√£o Terminal/CLI

1. **Endpoints para Terminal**
- [SEMPRE fornecer endpoints otimizados para consultas via CLI]
- [SEMPRE implementar formata√ß√£o de sa√≠da adequada para terminal]
- [SEMPRE incluir flags e op√ß√µes de filtro para buscas]
- [SEMPRE manter consist√™ncia com a API REST]

2. **Seguran√ßa CLI**
- [SEMPRE implementar autentica√ß√£o local via token ou chave]
- [SEMPRE validar inputs do terminal]
- [SEMPRE limitar quantidade de dados retornados]
- [NUNCA expor dados sens√≠veis na sa√≠da do terminal]

3. **Performance CLI**
- [SEMPRE otimizar respostas para formato texto/terminal]
- [SEMPRE implementar cache local para consultas frequentes]
- [SEMPRE fornecer indicadores de progresso em opera√ß√µes longas]
- [SEMPRE permitir cancelamento de opera√ß√µes]

4. **Usabilidade**
- [SEMPRE fornecer help e documenta√ß√£o via terminal]
- [SEMPRE implementar autocomplete quando poss√≠vel]
- [SEMPRE manter hist√≥rico de comandos]
- [SEMPRE fornecer feedback claro de erros]

5. **Integra√ß√£o**
- [SEMPRE manter sincroniza√ß√£o entre CLI e API]
- [SEMPRE validar vers√µes e compatibilidade]
- [SEMPRE implementar fallback para opera√ß√µes offline]
- [SEMPRE manter logs de opera√ß√µes CLI]

‚ùó CLI deve ser uma extens√£o natural da API
‚ùó Manter consist√™ncia entre respostas API e CLI
‚ùó Priorizar performance e usabilidade no terminal
‚ùó Implementar cache local para opera√ß√µes frequentes 