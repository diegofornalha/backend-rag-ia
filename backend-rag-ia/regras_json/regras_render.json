{
  "metadata_global": {
    "language": "pt-BR",
    "tipo": "regra",
    "fonte": "REGRAS_RENDER.md",
    "data_criacao": "2024-12-29T18:09:22.574711",
    "categorias": [
      "regras",
      "render"
    ],
    "id": "e5c7442b195ec508b0ed883fa296ed2c"
  },
  "document": {
    "content": "1.1 Arquivos Obrigatórios na Raiz:\n- **Dockerfile** → Arquivo principal para build da aplicação\n- **requirements.txt** → Dependências Python do projeto\n- **render.yaml** → Configurações de infraestrutura (opcional)\n\n1.2 Variáveis de Ambiente:\n- Configurar na plataforma do Render\n- Não expor valores sensíveis no código\n- HOST deve ser configurado como \"0.0.0.0\"\n- PORT deve ser 10000 (padrão do Render)\n\n2.1 Detecção Automática:\n- O Render detecta automaticamente o Dockerfile na raiz\n- Não é necessário configurar comandos de build/start manualmente\n- O healthcheck é importante para o Render monitorar a aplicação\n\n2.2 Healthcheck:\n- Endpoint `/api/v1/health` é obrigatório\n- O Render verifica a cada 10 segundos\n- Timeout de 30 segundos para resposta\n- Falhas múltiplas podem causar redeploy\n\n3. Boas Práticas:\n- Usar multi-stage build no Dockerfile\n- Manter dependências atualizadas no requirements.txt\n- Configurar logs apropriadamente\n- Documentar variáveis de ambiente necessárias\n- Testar localmente antes do deploy\n\n4.1 Dashboard e Alertas:\n- Configurar notificações de status\n- Monitorar logs através do dashboard\n- Verificar métricas de performance\n- Configurar alertas para falhas\n\n4.2 Monitoramento via SSH:\n- Gerar chave SSH: `ssh-keygen -t ed25519 -C \"seu-email@exemplo.com\"`\n- Adicionar chave pública no Render (Dashboard → Settings → SSH Keys)\n- Testar conexão: `ssh srv-ctmtqra3esus739sknb0@ssh.oregon.render.com`\n\n4.3 Configuração SSH Local:\n```bash\n\nAdicionar ao ~/.ssh/config:\nHost render\nHostName ssh.oregon.render.com\nUser srv-ctmtqra3esus739sknb0\nIdentityFile ~/.ssh/id_ed25519\nStrictHostKeyChecking no\nUserKnownHostsFile /dev/null\n```\n\n4.4 Comandos SSH Úteis:\n- Ver logs em tempo real: `ssh render tail -f /var/log/render/*.log`\n- Status do serviço: `ssh render systemctl status backend-rag-ia`\n- Verificar deploy: `ssh render cat /etc/render/deploy.log`\n- Monitorar recursos: `ssh render top`\n- Verificar arquivos: `ssh render ls -la /app/`\n- Verificar ambiente virtual: `ssh render ls -la /opt/venv/`\n- Verificar variáveis: `ssh render env | grep SUPABASE`\n\n4.5 Boas Práticas SSH:\n- Manter chaves SSH seguras\n- Usar nomes descritivos para as chaves\n- Revogar acesso de chaves não utilizadas\n- Monitorar tentativas de acesso suspeitas\n\n5. Segurança:\n- Não commitar arquivos .env\n- Usar variáveis de ambiente do Render\n- Manter secrets seguros\n- Seguir práticas de segurança do Docker\n\n6.1 Configurações Gerais:\n- Nome: coflow\n- URL: api.coflow.com.br\n- Tipo: Docker (Standard)\n- Branch: main\n- Região: Oregon\n- Porta: 10000 (padrão do Render)\n- Health Check: /api/v1/health\n- Repositório: diegofornalha/backend-rag-ia\n\n6.2 Configurações Técnicas:\n- Blueprint managed\n- Internal Address: backend-rag-ia:10000\n- Protocolo: HTTP\n- Auto Deploy: Habilitado para branch main\n**IMPORTANTE**: Este é o único serviço em produção até o momento. Não criar serviços adicionais sem autorização expressa.",
    "metadata": {
      "type": "regra",
      "title": "REGRAS_RENDER",
      "autor": "sistema",
      "formato_original": "markdown",
      "tags": [
        "documentação",
        "regras",
        "render"
      ],
      "versao": "1.0"
    }
  }
}