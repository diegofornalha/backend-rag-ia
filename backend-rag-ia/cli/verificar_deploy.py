import os
import sys
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.markdown import Markdown

console = Console()


def criar_build_sh():
    """Cria o arquivo build.sh com as configura√ß√µes necess√°rias."""
    conteudo = """#!/usr/bin/env bash
# exit on error
set -o errexit

# Instala depend√™ncias
pip install -r requirements.txt

# Coleta arquivos est√°ticos (se necess√°rio)
# python manage.py collectstatic --no-input

# Executa migra√ß√µes (se necess√°rio)
# python manage.py migrate

# Configura√ß√µes adicionais
export PORT=10000
export HOST=0.0.0.0
"""

    with open("build.sh", "w") as f:
        f.write(conteudo)

    # Torna o arquivo execut√°vel
    os.chmod("build.sh", 0o755)
    console.print("‚úÖ Arquivo build.sh criado e configurado")


def verificar_dockerfile():
    """Verifica se o Dockerfile est√° configurado corretamente."""
    try:
        with open("Dockerfile", "r") as f:
            conteudo = f.read()

        problemas = []

        # Verifica configura√ß√µes importantes
        if "EXPOSE 10000" not in conteudo:
            problemas.append("‚ùå Falta EXPOSE 10000")

        if "WORKDIR /app" not in conteudo:
            problemas.append("‚ùå Falta WORKDIR /app")

        if "COPY requirements.txt" not in conteudo:
            problemas.append("‚ùå Falta copiar requirements.txt")

        if problemas:
            console.print("\nüîç Problemas encontrados no Dockerfile:")
            for problema in problemas:
                console.print(problema)
        else:
            console.print("‚úÖ Dockerfile est√° configurado corretamente")

    except FileNotFoundError:
        console.print("‚ùå Dockerfile n√£o encontrado")


def verificar_requirements():
    """Verifica se requirements.txt tem todas as depend√™ncias necess√°rias."""
    try:
        with open("requirements.txt", "r") as f:
            deps = f.read().splitlines()

        deps_necessarias = [
            "gunicorn",
            "python-dotenv",
            "rich",
            "supabase",
            "sentence-transformers",
        ]

        faltando = []
        for dep in deps_necessarias:
            if not any(d.startswith(dep) for d in deps):
                faltando.append(dep)

        if faltando:
            console.print("\nüì¶ Depend√™ncias faltando no requirements.txt:")
            for dep in faltando:
                console.print(f"‚ùå {dep}")
        else:
            console.print("‚úÖ requirements.txt est√° completo")

    except FileNotFoundError:
        console.print("‚ùå requirements.txt n√£o encontrado")


def verificar_render_yaml():
    """Verifica se render.yaml est√° configurado corretamente."""
    try:
        with open("render.yaml", "r") as f:
            conteudo = f.read()

        checklist = [
            ("services:", "Defini√ß√£o de servi√ßos"),
            ("type: web", "Tipo de servi√ßo"),
            ("name:", "Nome do servi√ßo"),
            ("env:", "Vari√°veis de ambiente"),
            ("buildCommand:", "Comando de build"),
            ("startCommand:", "Comando de start"),
        ]

        problemas = []
        for termo, descricao in checklist:
            if termo not in conteudo:
                problemas.append(f"‚ùå Falta {descricao}")

        if problemas:
            console.print("\nüîç Problemas encontrados no render.yaml:")
            for problema in problemas:
                console.print(problema)
        else:
            console.print("‚úÖ render.yaml est√° configurado corretamente")

    except FileNotFoundError:
        console.print("‚ùå render.yaml n√£o encontrado")


def main():
    console.print("\nüöÄ Verificador de Deploy Render\n")

    # Verifica e cria build.sh se necess√°rio
    if not os.path.exists("build.sh"):
        console.print("üìù Criando build.sh...")
        criar_build_sh()
    else:
        console.print("‚úÖ build.sh j√° existe")

    # Verifica outros arquivos
    console.print("\nüìã Verificando configura√ß√µes...")
    verificar_dockerfile()
    verificar_requirements()
    verificar_render_yaml()

    # Dicas finais
    console.print("\nüí° Pr√≥ximos passos:")
    console.print("1. Corrija os problemas encontrados")
    console.print("2. Teste localmente usando docker build")
    console.print("3. Fa√ßa commit das altera√ß√µes")
    console.print("4. Push para o reposit√≥rio")
    console.print("5. Verifique o deploy no dashboard do Render")


if __name__ == "__main__":
    main()
