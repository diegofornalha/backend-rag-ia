{
  "metadata_global": {
    "language": "pt-BR",
    "tipo": "regra",
    "fonte": "PROJECT_RULES.md",
    "data_criacao": "2024-12-30T16:03:01.500528",
    "categorias": [
      "regras"
    ],
    "id": "a8d29f8ce728bf3e9a484559d63eb223"
  },
  "document": {
    "content": "Organização das Regras:\n1. **Localização das Regras**:\n- Todas as regras devem estar na pasta `backend_rag_ia/regras_md/`\n- Não criar novas pastas para regras\n- Não duplicar pastas de regras\n2. **Adicionando Novas Regras**:\n- Quando receber instrução para \"colocar\" regras:\n- Adicionar no arquivo `.md` correspondente em `regras_md/`\n- Não criar nova pasta, usar a estrutura existente\n- Para temas completamente novos:\n- Criar novo arquivo `.md` dentro de `regras_md/`\n- Seguir padrão de nomenclatura: `REGRAS_NOVO_TEMA.md`\n3. **Estrutura de Arquivos**:\n```\nbackend_rag_ia/\n└── regras_md/\n├── PROJECT_RULES.md\n├── REGRAS_API.md\n├── REGRAS_DOCKER.md\n├── REGRAS_RENDER.md\n└── ... (outros arquivos de regras)\n```\n\nBoas Práticas:\n1. **Manutenção**:\n- Manter regras organizadas por tema\n- Atualizar arquivos existentes ao invés de criar novos\n- Evitar duplicação de informações\n2. **Nomenclatura**:\n- Usar MAIÚSCULAS para nomes de arquivos\n- Prefixo \"REGRAS\\_\" para arquivos de regras\n- Sufixo \".md\" para todos os arquivos\n3. **Conteúdo**:\n- Manter formatação Markdown consistente\n- Organizar regras hierarquicamente\n- Incluir exemplos quando necessário\n\n1.1 Arquivos na Raiz:\n- **Dockerfile** → Build da aplicação\n- **requirements.txt** → Dependências Python\n- **render.yaml** → Configurações do Render (opcional)\n\nScripts Permitidos na Raiz (`/scripts_apenas_raiz/`):\n- Scripts de infraestrutura (Docker, Render, SSH)\n- Scripts de monitoramento de produção\n- Scripts de formatação e linting\n- Scripts de inicialização geral\n\nNomenclatura dos Scripts na Raiz:\n- Nomes devem ser curtos e autoexplicativos\n- Usar snake_case para arquivos Python e kebab-case para Shell\n- Usar verbos no infinitivo para indicar ação\n- Exemplos:\n- `formatar.py` → Formatador de código\n- `monitorar_docker.py` → Monitoramento de build Docker\n- `verificar_prod.py` → Verificador de produção\n- `controlar_render.py` → Controlador do Render\n- `controlar_ssh.sh` → Controlador de SSH\n- `iniciar.sh` → Inicializador do ambiente\n**Não permitido na raiz:**\n- Scripts específicos do projeto (devem ficar em `backend_rag_ia/scripts/`)\n- Scripts de processamento de dados\n- Scripts de regras de negócio\n\nTestes na Raiz (`/tests_apenas_raiz/`):\n- Testes de infraestrutura\n- Testes de deploy\n- Testes de configuração\n**Não permitido na raiz:**\n- Testes unitários do projeto (devem estar em `backend_rag_ia/tests/`)\n- Testes de regras de negócio\n- Testes de API específicos\n\n1.3 Organização de Pastas:\n- **/regras_md** → Documentação e regras do projeto\n- **/monitoring** → Configurações de monitoramento\n- **/api** → Código da API\n- **/services** → Serviços da aplicação\n- **/scripts** → Scripts utilitários\n\nRegras de Refatoração de Diretórios:\n1. **Mudança de Nome ou Localização**:\n- Ao renomear ou mover um diretório, todos os arquivos que o referenciam devem ser atualizados\n- Scripts devem verificar e alertar sobre referências quebradas\n- Exemplo: Se `backend-rag-ia` → `backend_rag_ia`, todos os imports devem ser atualizados\n2. **Verificações Obrigatórias**:\n- Antes de commitar mudanças em diretórios:\n- Rodar verificador de imports quebrados\n- Atualizar paths em scripts de configuração\n- Verificar referências em arquivos de build (Dockerfile, etc)\n3. **Documentação**:\n- Registrar mudanças significativas no CHANGELOG.md\n- Atualizar documentação que referencia os diretórios\n- Comunicar mudanças para a equipe\n**Não permitido:**\n- Mover/renomear diretórios sem atualizar referências\n- Deixar imports quebrados no código\n- Ignorar alertas de paths inválidos\n\n2.1 Python:\n- Usar Python 3.11+\n- Seguir PEP 8\n- Documentar funções e classes\n- Usar type hints\n\n2.2 Docker:\n- Multi-stage builds\n- Imagens slim\n- Limpar caches\n- Healthchecks configurados\n\n2.3 API:\n- Endpoints versionados\n- Documentação Swagger\n- Validação de dados\n- Tratamento de erros\n\nConfiguração do Flake8:\n1. **Regras Específicas para ML**:\n- Permite linhas mais longas em arquivos de modelo\n- Mais flexível com complexidade em código de treino\n- Permite variáveis não utilizadas (útil para tensores)\n- Ignora imports fora de ordem em notebooks\n2. **Diretórios Especiais**:\n- `/models/`: Regras flexíveis para definições de modelo\n- `/transformers/`: Permite nomes curtos de variáveis\n- `/preprocessing/`: Mais permissivo com complexidade\n- `/notebooks/`: Ignora maioria das regras de estilo\n3. **Docstrings**:\n- Formato Google obrigatório\n- Documentação de parâmetros ML clara\n- Exemplos de uso quando relevante\n- Descrição de shapes de tensores\n4. **Exceções Permitidas**:\n- Variáveis não utilizadas em callbacks\n- Imports condicionais para otimização\n- Linhas longas em definição de arquitetura\n- Complexidade alta em loops de treino\n\n3.1 Dependências:\n- Manter requirements.txt atualizado\n- Usar versões específicas\n- Documentar dependências opcionais\n- Separar dev e prod requirements\n\n3.2 Variáveis de Ambiente:\n- Sempre verificar se o `.env` está configurado antes de rodar scripts\n- Usar .env para desenvolvimento\n- Nunca commitar .env\n- Documentar todas as variáveis\n- Usar defaults seguros\n\n4.1 Código:\n- Não expor secrets\n- Validar inputs\n- Sanitizar outputs\n- Manter dependências seguras\n\n4.2 Infraestrutura:\n- CORS configurado\n- Rate limiting\n- Autenticação/Autorização\n- Backups automáticos",
    "metadata": {
      "type": "regra",
      "title": "PROJECT_RULES",
      "autor": "sistema",
      "formato_original": "markdown",
      "tags": [
        "documentação",
        "regras"
      ],
      "versao": "1.0"
    }
  }
}