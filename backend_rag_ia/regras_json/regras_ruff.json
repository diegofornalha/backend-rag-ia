{
  "metadata_global": {
    "language": "pt-BR",
    "tipo": "regra",
    "fonte": "REGRAS_RUFF.md",
    "data_criacao": "2024-12-30T16:03:01.501052",
    "categorias": [
      "regras"
    ],
    "id": "1c194671f399d5712d3e6f0631b98477"
  },
  "document": {
    "content": "Regra de Dupla Verificação:\n1. **Primeira Execução**:\n- Executar o Ruff para identificar problemas iniciais\n- Corrigir todos os problemas encontrados\n- Documentar as correções realizadas\n2. **Segunda Execução**:\n- Executar o Ruff novamente para garantir que:\n- As correções não introduziram novos problemas\n- Todos os problemas foram realmente resolvidos\n- Se novos problemas forem encontrados, voltar ao passo 1\n3. **Critérios de Sucesso**:\n- O script só é considerado validado quando:\n- Duas execuções consecutivas do Ruff não apresentarem erros\n- Todas as correções foram documentadas\n- Nenhum novo problema foi introduzido\n\nRegras de Correção:\n1. **Priorização**:\n- Corrigir primeiro problemas críticos (erros)\n- Em seguida, corrigir warnings\n- Por último, aplicar melhorias de estilo\n2. **Documentação**:\n- Registrar cada tipo de problema encontrado\n- Documentar a solução aplicada\n- Manter histórico das alterações\n3. **Validação**:\n- Testar o código após cada conjunto de correções\n- Garantir que as funcionalidades não foram afetadas\n- Verificar se as correções seguem as boas práticas\n\nExceções:\n1. **Falsos Positivos**:\n- Documentar claramente por que a regra não se aplica\n- Adicionar comentário no código explicando a exceção\n- Atualizar configuração do Ruff se necessário\n2. **Conflitos**:\n- Em caso de conflito entre regras, priorizar:\n1. Segurança\n2. Funcionalidade\n3. Manutenibilidade\n4. Estilo\n\nConfiguração do Ruff:\n```toml\n[tool.ruff]\nline-length = 100\ntarget-version = \"py311\"\n\nRegras habilitadas:\nselect = [\n\"E\",   # pycodestyle\n\"F\",   # pyflakes\n\"I\",   # isort\n\"N\",   # pep8-naming\n\"UP\",  # pyupgrade\n\"YTT\", # flake8-2020\n\"B\",   # flake8-bugbear\n\"C4\",  # flake8-comprehensions\n\"DTZ\", # flake8-datetimez\n\"ISC\", # flake8-implicit-str-concat\n\"PIE\", # flake8-pie\n\"T20\", # flake8-print\n\"PT\",  # flake8-pytest-style\n\"Q\",   # flake8-quotes\n\"RET\", # flake8-return\n\"SIM\", # flake8-simplify\n\"TCH\", # flake8-type-checking\n\"INT\", # flake8-gettext\n\"ARG\", # flake8-unused-arguments\n\"PGH\", # pygrep-hooks\n\"PL\",  # pylint\n\"TRY\", # tryceratops\n\"RUF\", # ruff-specific rules\n]\n\nRegras ignoradas:\nignore = [\n\"E501\",    # line too long\n\"PLR0913\", # too many arguments\n]\n\nConfigurações específicas:\n[tool.ruff.per-file-ignores]\n\"__init__.py\" = [\"F401\"] # unused imports\n[tool.ruff.isort]\nknown-first-party = [\"backend_rag_ia\"]\n```\n\nChecklist de Verificação:\nAntes de considerar o código aprovado, verificar:\n- [ ] Primeira execução do Ruff realizada\n- [ ] Problemas encontrados foram corrigidos\n- [ ] Segunda execução do Ruff realizada\n- [ ] Nenhum novo problema encontrado\n- [ ] Correções documentadas\n- [ ] Código testado e funcionando\n- [ ] Configuração do Ruff atualizada se necessário\n\nExemplo de Documentação:\n```markdown\n\nPrimeira Execução (DATA):\nProblemas encontrados:\n1. UP035: `typing.Tuple` é deprecated\n- Solução: Substituído por `tuple`\n2. Q000: Aspas simples encontradas\n- Solução: Substituídas por aspas duplas\n\nSegunda Execução (DATA):\n✅ Nenhum problema encontrado\n```",
    "metadata": {
      "type": "regra",
      "title": "REGRAS_RUFF",
      "autor": "sistema",
      "formato_original": "markdown",
      "tags": [
        "documentação",
        "regras"
      ],
      "versao": "1.0"
    }
  }
}