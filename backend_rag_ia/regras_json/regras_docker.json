{
  "metadata_global": {
    "language": "pt-BR",
    "tipo": "regra",
    "fonte": "REGRAS_DOCKER.md",
    "data_criacao": "2024-12-30T16:03:01.502960",
    "categorias": [
      "regras"
    ],
    "id": "d014b9a9bb2e787fde5a56af4282ab6d"
  },
  "document": {
    "content": "1. Estrutura do Dockerfile:\n- O Dockerfile deve estar **APENAS** na raiz do projeto\n- O requirements.txt deve estar **APENAS** na raiz do projeto\n- Não criar Dockerfiles duplicados em subdiretórios\n- O Render usa por padrão o Dockerfile e requirements.txt da raiz\n\n1.1 Organização de Arquivos Docker:\n- **Dockerfile** → Raiz do projeto (para deploy no Render)\n- **requirements.txt** → Raiz do projeto (para deploy no Render)\n- **docker-compose.yml** → Dentro da pasta específica do serviço (ex: `/monitoring`)\n- **Arquivos de configuração** → Junto com o docker-compose.yml do serviço (ex: `loki-config.yaml`)\n\nMulti-stage Build:\n```dockerfile\n\nEstágio de build:\nFROM python:3.11-slim as builder\n\nEstágio final:\nFROM python:3.11-slim\n```\n\nDiretórios e Permissões:\n```dockerfile\nRUN mkdir -p /app/logs /app/cache \\\n&& chmod -R 755 /app/logs /app/cache\n```\n\nVariáveis de Ambiente:\n```dockerfile\nENV PYTHONUNBUFFERED=1\nENV PORT=10000\n```\n\n3. Boas Práticas:\n- Usar multi-stage build para otimização\n- Manter apenas dependências necessárias\n- Limpar cache e arquivos temporários\n- Configurar healthcheck\n- Usar imagens slim para reduzir tamanho\n- Copiar apenas arquivos necessários\n\n4. Segurança:\n- Não expor senhas ou chaves no Dockerfile\n- Usar variáveis de ambiente para configurações sensíveis\n- Manter permissões restritas nos diretórios\n- Remover ferramentas de desenvolvimento no estágio final\n\n5. Deploy no Render:\n- O Render detecta automaticamente o Dockerfile na raiz\n- Não é necessário configurar comandos de build/start\n- O Render usa as variáveis de ambiente configuradas na plataforma\n- A porta padrão deve ser 10000 para compatibilidade\n\nOrganização dos Arquivos:\n1. **Módulo Principal** (`backend_rag_ia/`):\n- `app.py`: Aplicação FastAPI principal\n- `__init__.py`: Define o módulo e expõe a API pública\n- Demais arquivos da aplicação organizados em subpastas\n2. **Raiz do Projeto**:\n- `main.py`: Ponto de entrada para o uvicorn\n- `Dockerfile`: Configuração do container\n- `requirements.txt`: Dependências\n- Arquivos de configuração\n\nImportações e PYTHONPATH:\n1. **No `backend_rag_ia/__init__.py`**:\n```python\nfrom .app import app\n__all__ = ['app']\n```\n2. **No `main.py` da raiz**:\n```python\nfrom backend_rag_ia import app\n__all__ = ['app']\n```\n3. **No Dockerfile**:\n```dockerfile\nENV PYTHONPATH=/app\n```\n\nQuando Reconstruir a Imagem:\n1. Mudanças em Dependências:\n- Alterações no `requirements.txt`\n- Novas dependências do sistema\n- Atualizações de versões\n2. Mudanças na Estrutura:\n- Renomeação de arquivos principais (ex: main.py → app.py)\n- Alterações no PYTHONPATH\n- Novos diretórios que precisam ser copiados\n3. Mudanças no Dockerfile:\n- Configurações do container\n- Comandos de build\n- Imagem base\n4. Mudanças em Arquivos:\n- Novos assets\n- Arquivos de configuração\n- Arquivos copiados para o container\n5. Mudanças de Ambiente:\n- Variáveis de ambiente\n- Configurações de runtime\n\nComando para Reconstruir:\n```bash\ndocker buildx build --platform linux/amd64,linux/arm64 -t fornalha/backend:latest . --push\n```\n\nVerificação de Imagem:\nPara verificar se a imagem foi publicada e atualizada:\n1. Verificar no Docker Hub: https://hub.docker.com/r/fornalha/backend\n2. Confirmar tag `latest` atualizada\n3. Verificar manifestos para ambas arquiteturas (amd64 e arm64)\n\nBoas Práticas:\n1. **Isolamento**:\n- Manter aplicação isolada em seu próprio módulo\n- Usar `__init__.py` para definir API pública\n- Separar código da aplicação de configurações\n2. **Organização**:\n- Manter raiz do projeto limpa\n- Usar estrutura modular\n- Seguir convenções Python (underscore vs hífen)\n3. **Compatibilidade**:\n- Garantir que importações funcionem em todos ambientes\n- Manter PYTHONPATH consistente\n- Testar em diferentes plataformas",
    "metadata": {
      "type": "regra",
      "title": "REGRAS_DOCKER",
      "autor": "sistema",
      "formato_original": "markdown",
      "tags": [
        "documentação",
        "regras"
      ],
      "versao": "1.0"
    }
  }
}