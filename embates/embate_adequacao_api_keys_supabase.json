{
  "titulo": "Plano de Adequação às Novas API Keys do Supabase",
  "version_key": "adequacao_api_keys_supabase_v1",
  "conteudo": "# Plano de Adequação às Novas API Keys do Supabase\n\n## Contexto\nCom as mudanças anunciadas pelo Supabase para as API Keys em 2025, precisamos planejar a adequação do nosso projeto para garantir uma transição suave e sem interrupções.\n\n## Análise de Impacto\n\n### 1. Arquivos Afetados\n\n#### Variáveis de Ambiente\n- `.env`\n- `.env.example`\n- Variáveis no ambiente de produção\n\n#### Scripts SQL\n- `03_sql_apenas_raiz/1_setup/*.sql`\n- `03_sql_apenas_raiz/2_security/*.sql`\n- `03_sql_apenas_raiz/3_migrations/*.sql`\n\n#### Código Python\n- `02_ferramentas_rag_apenas_raiz/cli/*.py`\n- `04_scripts_apenas_raiz/**/*.py`\n- `06_testes_apenas_raiz/**/*.py`\n- `backend_rag_ia/**/*.py`\n\n### 2. Funcionalidades Impactadas\n1. Conexão com Supabase\n2. Autenticação e autorização\n3. Operações no banco de dados\n4. Scripts de manutenção\n5. Testes de integração\n\n## Plano de Ação\n\n### Fase 1: Preparação (Q4 2024)\n1. Criar branch `feature/supabase-new-keys`\n2. Atualizar `.env.example` com os novos nomes de variáveis:\n   ```env\n   # Novas variáveis\n   SUPABASE_PUBLISHABLE_KEY=sb_publishable_xxx\n   SUPABASE_SECRET_KEY=sb_secret_xxx\n   \n   # Manter compatibilidade\n   SUPABASE_ANON_KEY=${SUPABASE_PUBLISHABLE_KEY}\n   SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SECRET_KEY}\n   ```\n3. Criar funções de compatibilidade:\n   ```python\n   def get_supabase_key(key_type: str = 'service_role') -> str:\n       if key_type == 'service_role':\n           return os.getenv('SUPABASE_SECRET_KEY') or os.getenv('SUPABASE_SERVICE_ROLE_KEY')\n       return os.getenv('SUPABASE_PUBLISHABLE_KEY') or os.getenv('SUPABASE_ANON_KEY')\n   ```\n\n### Fase 2: Implementação (Q1 2025)\n1. Atualizar scripts de conexão com Supabase:\n   ```python\n   # Antes\n   supabase = create_client(url, os.getenv('SUPABASE_SERVICE_ROLE_KEY'))\n   \n   # Depois\n   supabase = create_client(url, get_supabase_key('service_role'))\n   ```\n\n2. Atualizar scripts SQL para usar as novas roles:\n   ```sql\n   -- Antes\n   GRANT ... TO service_role;\n   \n   -- Depois\n   GRANT ... TO service_role, secret_key;\n   ```\n\n3. Atualizar testes para cobrir ambos os formatos de chave\n\n### Fase 3: Testes (Q2 2025)\n1. Criar ambiente de teste com novas chaves\n2. Executar suite completa de testes\n3. Validar todas as operações de banco\n4. Testar cenários de fallback\n5. Verificar logs e monitoramento\n\n### Fase 4: Deploy (Q3 2025)\n1. Atualizar documentação\n2. Preparar roteiro de rollback\n3. Agendar janela de manutenção\n4. Executar migração em produção\n5. Monitorar métricas e logs\n\n### Fase 5: Limpeza (Q4 2025)\n1. Remover código de compatibilidade\n2. Atualizar documentação final\n3. Remover variáveis antigas\n4. Arquivar chaves legacy\n\n## Riscos e Mitigações\n\n### Riscos\n1. Incompatibilidade com bibliotecas antigas\n2. Problemas de permissão após migração\n3. Falhas em deploys automáticos\n4. Perda de acesso durante transição\n\n### Mitigações\n1. Manter compatibilidade via funções helper\n2. Testar exaustivamente permissões\n3. Atualizar pipelines de CI/CD\n4. Manter backup das chaves antigas\n\n## Critérios de Sucesso\n1. Zero downtime durante migração\n2. Todos os testes passando\n3. Nenhum impacto em produção\n4. Documentação atualizada\n5. Equipe treinada nas mudanças\n\n## Próximos Passos\n1. Aguardar disponibilidade das novas chaves\n2. Criar branch de feature\n3. Iniciar implementação das funções de compatibilidade\n4. Agendar review com equipe\n\n## Status\nPendente - Aguardando Q4 2024 para início da implementação",
  "error_log": null
}
